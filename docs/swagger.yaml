basePath: /api/v1
definitions:
  handlers.transactionSummaryData:
    additionalProperties: true
    type: object
  requests.CreateBankAccountRequest:
    properties:
      account_name:
        type: string
      account_type:
        type: string
      balance:
        type: number
      category:
        type: string
      currency:
        type: string
      user_id:
        type: integer
    type: object
  requests.CreateCategoryRequest:
    properties:
      context:
        type: string
      context_type:
        type: string
      description:
        type: string
      name:
        type: string
    type: object
  requests.CreateTagRequest:
    properties:
      name:
        type: string
    type: object
  requests.CreateTransactionRequest:
    properties:
      account_id:
        type: integer
      amount:
        type: number
      category:
        type: string
      category_id:
        type: string
      currency:
        type: string
      date:
        type: string
      date_format:
        type: string
      description:
        type: string
      transaction_type:
        type: string
      transaction_type_id:
        type: string
    type: object
  requests.CreateUserRequest:
    properties:
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      password:
        type: string
      userName:
        type: string
    type: object
  requests.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  responses.AccountResponse:
    properties:
      account_type:
        type: string
      balance:
        type: number
      category:
        type: string
      currency:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  responses.CategoryResponse:
    properties:
      context:
        type: string
      context_type:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  responses.CreateUserResponse:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  responses.ErrorResponse:
    properties:
      message:
        type: string
    type: object
  responses.LoginResponse:
    properties:
      token:
        type: string
    type: object
  responses.TagResponse:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  responses.TransactionResponse:
    properties:
      account_id:
        type: integer
      amount:
        type: number
      category:
        type: string
      currency:
        type: string
      date:
        type: integer
      description:
        type: string
      id:
        type: integer
      payee:
        type: string
      reference:
        type: string
      transaction_status:
        type: string
      transaction_type:
        type: string
    type: object
  responses.TransactionSchema:
    properties:
      computations:
        items:
          properties:
            formula:
              type: string
            name:
              type: string
          type: object
        type: array
      date_format:
        type: string
      mapping:
        items:
          properties:
            column:
              type: string
            default: {}
            name:
              type: string
            type:
              type: string
          type: object
        type: array
      name:
        type: string
    type: object
  responses.UserResponse:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: Maybe Finance API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Maybe Finance API
  version: "1.0"
paths:
  /accounts:
    get:
      description: Retrieve all accounts
      parameters:
      - description: Group by account type
        enum:
        - true
        - false
        in: query
        name: group_by_account_type
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/responses.AccountResponse'
            type: array
      summary: Get all accounts
      tags:
      - accounts
  /accounts/{id}:
    get:
      description: Retrieve an account
      parameters:
      - description: Account ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.AccountResponse'
      summary: Get an account
      tags:
      - accounts
  /accounts/{id}/transactions:
    get:
      description: Retrieve an account's transactions
      parameters:
      - description: Account ID
        in: path
        name: id
        required: true
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/responses.TransactionResponse'
            type: array
      summary: Get an account's transactions
      tags:
      - accounts
  /accounts/{id}/transactions/recent:
    get:
      consumes:
      - application/json
      description: Get 5 recent transactions for an account
      parameters:
      - description: Account ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/responses.TransactionResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Get 5 recent transactions for an account
      tags:
      - accounts
  /accounts/{id}/transactions/upload:
    post:
      consumes:
      - multipart/form-data
      description: Upload account transactions
      parameters:
      - description: Account ID
        in: path
        name: id
        required: true
        type: integer
      - description: Transactions File
        in: formData
        name: file
        required: true
        type: file
      - description: Transaction Schema
        in: formData
        name: transaction_schema
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/responses.TransactionResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Upload account transactions
      tags:
      - accounts
  /accounts/create:
    post:
      consumes:
      - application/json
      description: Create an account
      parameters:
      - description: Create Account Request
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/requests.CreateBankAccountRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/responses.AccountResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Create an account
      tags:
      - accounts
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login a user
      parameters:
      - description: Login Request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/requests.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.LoginResponse'
      summary: Login a user
      tags:
      - auth
  /categories:
    get:
      description: Retrieve all categories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/responses.CategoryResponse'
            type: array
      summary: Get all categories
      tags:
      - categories
  /categories/{id}:
    get:
      description: Retrieve a category
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.CategoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Get a category
      tags:
      - categories
  /categories/create:
    post:
      consumes:
      - application/json
      description: Create a category
      parameters:
      - description: Create Category Request
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/requests.CreateCategoryRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/responses.CategoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Create a category
      tags:
      - categories
  /categories/types:
    get:
      description: Retrieve all category types
      parameters:
      - description: Context
        in: query
        name: context
        type: string
      - description: Context Type
        in: query
        name: context_type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/responses.CategoryResponse'
            type: array
      summary: Get all category types
      tags:
      - categories
  /data/{account_id}/transactions/histogram:
    get:
      description: Get transaction histogram data
      operationId: get-transaction-histogram-data
      parameters:
      - description: Account ID
        in: path
        name: account_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: object
            type: array
      summary: Get transaction histogram data
      tags:
      - data
  /data/{account_id}/transactions/summary:
    get:
      description: Get transactions summary data
      parameters:
      - description: Filter
        enum:
        - transaction_category
        - transaction_type
        - month
        - year
        - week
        in: query
        name: filter
        type: string
      - description: Interval
        enum:
        - month
        - year
        - week
        in: query
        name: interval
        type: string
      - description: Group by
        in: query
        name: group_by
        type: string
      - description: Sort by
        in: query
        name: sort_by
        type: string
      - description: Sort order
        enum:
        - asc
        - desc
        in: query
        name: sort_order
        type: string
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      - description: Account ID
        in: path
        name: account_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.transactionSummaryData'
            type: array
      summary: Get transactions summary data
      tags:
      - data
  /transactions:
    get:
      description: Retrieve all transactions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/responses.TransactionResponse'
            type: array
      summary: Get all transactions
      tags:
      - transactions
  /transactions/{id}:
    get:
      description: Retrieve a transaction
      parameters:
      - description: Transaction ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.TransactionResponse'
      summary: Get a transaction
      tags:
      - transactions
  /transactions/{id}/tags:
    get:
      description: Retrieve all tags for a transaction
      parameters:
      - description: Transaction ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/responses.TagResponse'
            type: array
      summary: Get all tags for a transaction
      tags:
      - transactions
    post:
      consumes:
      - application/json
      description: Add a tag to a transaction
      parameters:
      - description: Transaction ID
        in: path
        name: id
        required: true
        type: string
      - description: Create Tag Request
        in: body
        name: tag
        required: true
        schema:
          $ref: '#/definitions/requests.CreateTagRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/responses.TagResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Add a tag to a transaction
      tags:
      - transactions
  /transactions/create:
    post:
      consumes:
      - application/json
      description: Create a transaction
      parameters:
      - description: Create Transaction Request
        in: body
        name: transaction
        required: true
        schema:
          $ref: '#/definitions/requests.CreateTransactionRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/responses.TransactionResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Create a transaction
      tags:
      - transactions
  /transactions/schemas:
    get:
      description: Retrieve transaction schemas
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/responses.TransactionSchema'
            type: array
      summary: Get transaction schemas
      tags:
      - transactions
  /users:
    get:
      description: Retrieve all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/responses.UserResponse'
            type: array
      summary: Get all users
      tags:
      - users
  /users/{id}:
    get:
      description: Retrieve a user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.UserResponse'
      summary: Get a user
      tags:
      - users
  /users/create:
    post:
      consumes:
      - application/json
      description: Create a user
      parameters:
      - description: Create User Request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/requests.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/responses.CreateUserResponse'
      summary: Create a user
      tags:
      - users
swagger: "2.0"
